#!/bin/bash
#
# A script to setup GPI environment variables for all *nix OS
# Currently tested on Ubuntu and FreeBSD(proxy for MacOS)
# 
#
# History
# 12/30/13 - Created (jasonwang)

printf "\n"
printf "**************************************************************************************\n"
printf "******* GPI Data Pipeline Environment Setup Script for Unix (Mac OS X) & Linux *******\n"
printf "**************************************************************************************\n"




#Function for verifying filepaths are correct. Will only update filepath if user supplies a different one.
#Requires one input, the name of the envrionment variable that you want to check.
function promptUser	()
{
	#read in variable
	local var="$1"
	#begin prompt
	while true; do
		#check current state of the variable
		eval currpath="\$$var"
		read -p "For $var, is '$currpath' the correct path (y|n)? " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) read -p "Please enter a new path for $var (absolute path please):" "$var";;
			* ) printf "\nPlease answer yes or no.\n\n";;
		esac
	done
}



#Making some guesses of where the GPI directories should be.. should work for default setup from zip file
#this script should be inside GPI Pipeline script folder. Find the location of the folder.
SCRIPTDIR=$(dirname "$0")/
CURRDIR=$(pwd)
cd "$SCRIPTDIR"
SCRIPTDIR=$(pwd)
cd "$CURRDIR"
#$SCRIPTDIR=$(readlink -f "$SCRIPTDIR") #change to absolute path (probably unncessary)
#echo "DEBUG: current directory is $SCRIPTDIR"


GPI_PIPELINE_DIR=$(dirname "$SCRIPTDIR")

# Are we installing the compiled version or the source code version?
if [ -d "$GPI_PIPELINE_DIR/executables" ]
then
    IS_COMPILED=1
    printf " This appears to be an installation of the compiled version.\n"
else
    IS_COMPILED=0
    printf " This appears to be an installation from source code.\n"
fi

if [ $IS_COMPILED == 0 ] ; then 
#Check to make sure IDL is in the path first. Make the user set up IDL before running this.
command -v idl >/dev/null && printf "\nIDL Found In \$PATH\n" || { printf "\nWARNING: IDL is not in \$PATH. Please make sure IDL is installed\n and not aliased. An aliased IDL may not work with the gpi-pipeline\n shortcut, but you can still launch the pipeline manually. \n\n"; }
fi



printf "\n We will need to set up some directories. Please provide the\n correct directory (absolute paths!) for each of the following\n environment variables. This program will attempt to guess a location\n that may or may not be right. PLEASE CHECK AND ADJUST THESE AS DESIRED\n FOR YOUR COMPUTER.\n\n"

#Get the GPI Pipeline base directory and begin prompting using to confirm/change environment variables
printf " Finding the location of the GPI pipeline directory. This should be the\n top-level directory of the downloaded and unzipped pipeline, containing\n contain folders such as 'scripts', 'config', & 'recipe_remplates'\n among others.\n\n"
#Check with user to ensure correct directory
promptUser "GPI_PIPELINE_DIR"


BASEDIR="$(dirname $GPI_PIPELINE_DIR)" #hopefully where both pipeline and external are

if [ $IS_COMPILED == 0 ] ; then
    printf "\n Finding the location of the GPI external libraries directory.\n This directory should contain the pipeline dependencies ('pipeline_deps').\n"
    EXTERNDIR="$BASEDIR/external"

    # If we can confirm that we have found the external directory, then there is no need to prompt the user. 
    # We know we have found it if we either (a) can confirm we're looking at the parent directory for the pipeline_deps directory 
    # from svn, or (b) if we're looking at the pipeline_deps directory itself, as inferred from whether it contains one of 
    # the more obscure dependency files there which is not likely to be present in some other directory.
    if  [[ -d "$EXTERNDIR/pipeline_deps" ]] || [[ -e "$EXTERNDIR/fftrot.pro" ]] 
    then
	printf " EXTERNDIR automatically located at ${EXTERNDIR}. No user input needed.\n\n"
    else 
        promptUser "EXTERNDIR"
    fi 
fi

DATADIR="$BASEDIR/data"

printf "\n Looking up default directory to set up a GPI Data directory. \n Please change this to a folder you intend in store GPI data in. This script \n will automatically create subdirectories for Raw data, Reduced data, log files, \n and so on. If you wish to adjust these paths later, you may do so by editing \n the \$HOME/.gpienv file. \n\n"
promptUser "DATADIR"

printf "\nGPI Pipeline directory will be $GPI_PIPELINE_DIR\n"
if [ $IS_COMPILED == 0 ] ; then 
    printf "GPI External Libraries directory will be $EXTERNDIR\n"
fi
printf "GPI Data directory will be $DATADIR\n"

#location of the environment settings file we will create
GPIENV="$HOME/.gpienv"
printf "Creating GPI configuration file in $HOME/.gpienv\n"

printf "Setting up folders inside your GPI Data Directory (if necessary)...\n"
# Create Data directories if they don't already exist
if [ ! -d "$DATADIR" ]
then
	echo "Making directory: $DATADIR/"
	mkdir "$DATADIR"
fi
if [ ! -d "$DATADIR/queue/" ]
then
	echo "Making directory: $DATADIR/queue/"
	mkdir "$DATADIR/queue"
fi
if [ ! -d "$DATADIR/Reduced/" ]
then
	echo "Making directory: $DATADIR/Reduced/"
	mkdir "$DATADIR/Reduced"
fi
if [ ! -d "$DATADIR/Reduced/calibrations/" ]
then
	echo "Making directory: $DATADIR/Reduced/calibrations/"
	mkdir "$DATADIR/Reduced/calibrations"
fi
if [ ! -d "$DATADIR/Reduced/logs/" ]
then
	echo "Making directory: $DATADIR/Reduced/logs/"
	mkdir "$DATADIR/Reduced/logs"
fi
if [ ! -d "$DATADIR/Reduced/recipes/" ]
then
	echo "Making directory: $DATADIR/Reduced/recipes/"
	mkdir "$DATADIR/Reduced/recipes"
fi
if [ ! -d "$DATADIR/Raw" ]
then
	echo "Making directory: $DATADIR/Raw/"
	mkdir "$DATADIR/Raw"
fi

if [ $IS_COMPILED == 0 ]
then
    #append to IDL_PATH varabile if it exists, otherwise create the IDL PATH variable
    if [ -z "$IDL_PATH" ];
    then
	    #if it doesn't exist, make it with the standard idl libraries appended
	    IDL_PATH_APPEND="+$GPI_PIPELINE_DIR/:+$EXTERNDIR/:<IDL_DEFAULT>"
    else
	    #prepend GPI pipeline to IDL Path
	    IDL_PATH_APPEND="+$GPI_PIPELINE_DIR/:+$EXTERNDIR/:\${IDL_PATH}"
    fi
fi

#Write configuration files depending on the shell
if [ "$SHELL" == "/bin/bash" ];
then
	#write GPI environment file
	printf "\nWriting GPI Settings to $GPIENV\n\n"
	printf "# Set up environment variables for the GPI IFS Software\n# Bash Version\n# Source this file from your .bashrc file\n\n" > "$GPIENV" #erase any previous incarnation
	printf "#----- Required paths -----------------\n# GPI_DATA_ROOT is a helper path only.\n# If desired you can set all paths independently\n" >> "$GPIENV"
	if [ $IS_COMPILED == 1 ] ; then 
	    # figure out the version-number-dependent path for IDL
	    IDL_DIR=$(echo "$GPI_PIPELINE_DIR"/executables/idl* )
	    #printf "IDL_DIR: $IDL_DIR\n"
	    printf "export IDL_DIR=\"$IDL_DIR\"\n" >> "$GPIENV"
	    printf "export GPI_DRP_DIR=\"$GPI_PIPELINE_DIR/\"\n\n" >> "$GPIENV"
	fi
	printf "export GPI_DATA_ROOT=\"$DATADIR/\"\n" >> "$GPIENV" 
	printf "export GPI_DRP_QUEUE_DIR=\"\${GPI_DATA_ROOT}queue/\"\n" >> "$GPIENV"
	printf "export GPI_RAW_DATA_DIR=\"\${GPI_DATA_ROOT}Raw/\"\n" >> "$GPIENV"
	printf "export GPI_REDUCED_DATA_DIR=\"\${GPI_DATA_ROOT}Reduced/\"\n" >> "$GPIENV"
	printf "\n#----- \$PATH and \$IDL_PATH Configuration ---------------\n" >> "$GPIENV"
	printf "export PATH=\"\${PATH}:$SCRIPTDIR/\"\n" >> "$GPIENV"
	if [ $IS_COMPILED == 0 ]; then 
	    printf "export IDL_PATH=\"$IDL_PATH_APPEND\"\n" >> "$GPIENV"
	fi
	#source into bashrc file if ncessary:
	if !(grep -Fxq "source \$HOME/.gpienv" "$HOME/.bashrc")
	then
        printf " The .gpienv file needs to be executed to set environment variables each\n time you start a new terminal. This setup script would like to\n source your .gpienv file in your .bashrc so the\n GPI Pipeline is configured when you open a new bash shell.\n Note that if you are using a login shell (this includes MacOS users),\n you will want to make sure your .bashrc file is sourced into your\n .bash_profile file. For users with complicated bash configurations,\n you may want to check that this will not mess up your IDL_PATH and\n PATH variables.\n\n If you are unfamiliar with .bashrc and .bash_profile, please see:\n    http://dghubble.com/blog/posts/.bashprofile-.profile-and-.bashrc-conventions/\n\n"
	    while true; do
		read -p "Should this script edit your .bashrc to source \$HOME/.gpienv? (y|n) " yn
		case $yn in
			[Yy]* ) 
			    printf "Modifying $HOME/.bashrc to automatically run $GPIENV\n"
			    printf "\n# GPI Pipeline Environment Configuration\n" >> "$HOME/.bashrc"
			    printf "source \$HOME/.gpienv\n" >> "$HOME/.bashrc"
			    break;;
			[Nn]* ) 
			    printf "Your .bashrc file will be left as-is. Please edit it manually to source .gpienv. \n"
			    break;;
			* ) printf "\nPlease answer yes or no.\n\n";;
		esac
	   done
	else 
	    printf "Your \$HOME/.bashrc file appears to already source the .gpienv file; no further action needed.\n\n"
	fi
	#reset shell with new environment, this sometimes doesn't work correctly..
	#exec bash
elif [ "$SHELL" == "/bin/zsh" ];
then
	#write GPI environment file
	printf "\nWriting GPI Settings to $GPIENV\n\n"
	printf "# Set up environment variables for the GPI IFS Software\n# Bash Version\n# Source this file from your .zshrc file\n\n" > "$GPIENV" #erase any previous incarnation
	printf "#----- Required paths -----------------\n# GPI_DATA_ROOT is a helper path only.\n# If desired you can set all paths independently\n" >> "$GPIENV"
	if [ $IS_COMPILED == 1 ] ; then 
	    # figure out the version-number-dependent path for IDL
	    IDL_DIR=$(echo "$GPI_PIPELINE_DIR"/executables/idl* )
	    #printf "IDL_DIR: $IDL_DIR\n"
	    printf "export IDL_DIR=\"$IDL_DIR\"\n" >> "$GPIENV"
	    printf "export GPI_DRP_DIR=\"$GPI_PIPELINE_DIR/\"\n\n" >> "$GPIENV"
	fi
	printf "export GPI_DATA_ROOT=\"$DATADIR/\"\n" >> "$GPIENV" 
	printf "export GPI_DRP_QUEUE_DIR=\"\${GPI_DATA_ROOT}queue/\"\n" >> "$GPIENV"
	printf "export GPI_RAW_DATA_DIR=\"\${GPI_DATA_ROOT}Raw/\"\n" >> "$GPIENV"
	printf "export GPI_REDUCED_DATA_DIR=\"\${GPI_DATA_ROOT}Reduced/\"\n" >> "$GPIENV"
	printf "\n#----- \$PATH and \$IDL_PATH Configuration ---------------\n" >> "$GPIENV"
	printf "export PATH=\"\${PATH}:$SCRIPTDIR/\"\n" >> "$GPIENV"
	if [ $IS_COMPILED == 0 ]; then 
	    printf "export IDL_PATH=\"$IDL_PATH_APPEND\"\n" >> "$GPIENV"
	fi
	#source into zshrc file if ncessary:
	if !(grep -Fxq "source \$HOME/.gpienv" "$HOME/.zshrc")
	then
        printf " The .gpienv file needs to be executed to set environment variables each\n time you start a new terminal. This setup script would like to\n source your .gpienv file in your .zshrc so the\n GPI Pipeline is configured when you open a new zsh shell.\n Note that if you are using a login shell (this includes MacOS users),\n you will want to make sure your .zshrc file is sourced into your\n .zsh_profile file. For users with complicated zsh configurations,\n you may want to check that this will not mess up your IDL_PATH and\n PATH variables.\n\n"
	    while true; do
		read -p "Should this script edit your .zshrc to source \$HOME/.gpienv? (y|n) " yn
		case $yn in
			[Yy]* ) 
			    printf "Modifying $HOME/.zshrc to automatically run $GPIENV\n"
			    printf "\n# GPI Pipeline Environment Configuration\n" >> "$HOME/.zshrc"
			    printf "source \$HOME/.gpienv\n" >> "$HOME/.zshrc"
			    break;;
			[Nn]* ) 
			    printf "Your .zshrc file will be left as-is. Please edit it manually to source .gpienv. \n"
			    break;;
			* ) printf "\nPlease answer yes or no.\n\n";;
		esac
	   done
	else 
	    printf "Your \$HOME/.zshrc file appears to already source the .gpienv file; no further action needed.\n\n"
	fi
	#reset shell with new environment, this sometimes doesn't work correctly..
	#exec zsh	
elif [ "$SHELL" == "/bin/csh" ] || [ "$SHELL" == "/bin/tcsh" ]
then	
	#write GPI environment file
	printf "\n\nWriting GPI Settings to $GPIENV\n\n"
	printf "# Set up environment variables for the GPI IFS Software\n# csh Version\n# Source this file from your .cshrc file\n\n" > "$GPIENV" #erase any previous incarnation
	printf "#----- Required paths -----------------\n# GPI_DATA_ROOT is a helper path only.\n# If desired you can set all paths independently\n" >> "$GPIENV"
	if [ $IS_COMPILED == 1 ] ; then 
	    # figure out the version-number-dependent path for IDL
	    IDL_DIR=$(echo "$GPI_PIPELINE_DIR"/executables/idl* )
	    #printf "IDL_DIR: $IDL_DIR\n"
	
	    printf "setenv IDL_DIR \"$IDL_DIR\"\n" >> "$GPIENV"
	    printf "setenv GPI_DRP_DIR \"$GPI_PIPELINE_DIR/\"\n\n" >> "$GPIENV"
	fi
	printf "setenv GPI_DATA_ROOT \"$DATADIR/\"\n" >> "$GPIENV"
	printf "setenv GPI_DRP_QUEUE_DIR \"\${GPI_DATA_ROOT}queue/\"\n" >> "$GPIENV"
	printf "setenv GPI_RAW_DATA_DIR \"\${GPI_DATA_ROOT}Raw/\"\n" >> "$GPIENV"
	printf "setenv GPI_REDUCED_DATA_DIR \"\${GPI_DATA_ROOT}Reduced/\"\n" >> "$GPIENV"
	printf "\n#----- \$PATH and \$IDL_PATH Configuration ---------------\n" >> "$GPIENV"
	printf "setenv PATH \"\${PATH}:$SCRIPTDIR/\"\n" >> "$GPIENV"
	if [ $IS_COMPILED == 0 ]; then 
	    printf "setenv IDL_PATH \"$IDL_PATH_APPEND\"\n" >> "$GPIENV"
	fi
	#source into cshrc file if necessary
	if !(grep -Fxq "source \$HOME/.gpienv" "$HOME/.cshrc")
	then
	    printf " The .gpienv file needs to be executed to set environment variables each\n time you start a new terminal. Would you like this setup script to\n modify your .cshrc file to automatically source .gpienv when you\n open a terminal?\n\n"
	    while true; do
		read -p "Should this script edit your .cshrc to source \$HOME/.gpienv? (y|n) " yn
		case $yn in
			[Yy]* ) 
			    printf "Modifying $HOME/.cshrc to automatically run $GPIENV\n"
			    printf "\n# GPI Pipeline Environment Configuration\n" >> "$HOME/.cshrc"
			    printf "source \$HOME/.gpienv\n" >> "$HOME/.cshrc"
			    break;;
			[Nn]* ) 
			    printf "Your .cshrc file will be left as-is. Please edit it manually to source .gpienv. \n"
			    break;;
			* ) printf "\nPlease answer yes or no.\n\n";;
		esac
	   done
	else 
	    printf "Your \$HOME/.cshrc file appears to already source the .gpienv file; no further action needed.\n\n"
	fi 
	#reset shell with new environment, may not work correctly sometimes..
	#printf "\nInstallation Complete!\n"
	#if [ "$SHELL" == "/bin/csh" ]
	#then
	#	exec csh
	#else
	#	exec tcsh
	#fi
else
    printf "\nXXXXXXXXXXXXXXXXXXXXXXXX        ERROR         XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"
    printf "X                                                                          X\n"
    printf "X    Your selected Unix shell ('$SHELL') is not supported by this script.  X\n"
    printf "X    Must be one of:   /bin/bash   /bin/csh   /bin/tcsh  /bin/zsh          X\n"
    printf "X                                                                          X\n"
    printf "X    You must be doing something nonstandard. Hopefully if you are         X\n"
    printf "X    technically skilled enough to change your shell to that, you are      X\n"
    printf "X    also capable of figuring out how to set environment variables in it.  X\n"
    printf "X    Please consult the GPI pipeline documentation for descriptions        X\n"
    printf "X    of the variables that need to be set.                                 X\n"
    printf "X                                                                          X\n"
    printf "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n"
    exit
fi

printf "\n****************    Installation Complete!    ***************\n You will need to restart your terminal to run gpi-pipeline.\n*************************************************************\n\n"
